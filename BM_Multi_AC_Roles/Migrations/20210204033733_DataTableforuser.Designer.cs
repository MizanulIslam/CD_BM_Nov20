// <auto-generated />
using System;
using BM_Multi_AC_Roles.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BM_Multi_AC_Roles.Migrations
{
    [DbContext(typeof(ClientUserDataContext))]
    [Migration("20210204033733_DataTableforuser")]
    partial class DataTableforuser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BM_Models.Company", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BalanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.Property<decimal>("PaidInvoiceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalInvoiceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("BM_Models.Country", b =>
                {
                    b.Property<string>("CountryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencySymbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn6")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("BM_Models.Employee", b =>
                {
                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeHeadEmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Joblevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportsTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleOfCourtesy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeID");

                    b.HasIndex("EmployeeHeadEmployeeID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("BM_Models.Items", b =>
                {
                    b.Property<string>("ItemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<string>("ExtraColumn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemHSNCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuantityPerUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ReorderLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SupplierID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitsInStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitsOnOrder")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ItemID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("BM_Models.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExtraColumn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmountBeforeTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BM_Models.Order_Items", b =>
                {
                    b.Property<string>("OrderItemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExtraColumn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HSNCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemsItemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TaxID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxTypeTaxID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderItemID");

                    b.HasIndex("ItemsItemID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TaxTypeTaxID");

                    b.ToTable("Order_Items");
                });

            modelBuilder.Entity("BM_Models.SaleInvoice", b =>
                {
                    b.Property<string>("SaleInvoceID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerBusinessID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SaleInvoceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmountBeforeTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SaleInvoceID");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeID");

                    b.ToTable("SaleInvoices");
                });

            modelBuilder.Entity("BM_Models.SaleInvoice_Items", b =>
                {
                    b.Property<string>("SaleInvoiceItemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExtraColumn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HSNCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemsItemID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SaleInvoiceSaleInvoceID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SalesInvoiceID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TaxID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxTypeTaxID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SaleInvoiceItemID");

                    b.HasIndex("ItemsItemID");

                    b.HasIndex("SaleInvoiceSaleInvoceID");

                    b.HasIndex("TaxTypeTaxID");

                    b.ToTable("SaleInvoice_Items");
                });

            modelBuilder.Entity("BM_Models.SubTax", b =>
                {
                    b.Property<string>("TaxID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExtraColumn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SubTaxName")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TaxTypeTaxID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TaxID");

                    b.HasIndex("TaxTypeTaxID");

                    b.ToTable("SubTaxes");
                });

            modelBuilder.Entity("BM_Models.Supplier", b =>
                {
                    b.Property<string>("SupplierID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BalanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PaidPurchaseInvoiceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PurchaseInvoiceCount")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderCount")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPurchaseInvoiceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("BM_Models.TaxType", b =>
                {
                    b.Property<string>("TaxID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraColumn6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TaxName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaxID");

                    b.HasIndex("CountryID");

                    b.ToTable("TaxTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BM_Models.Employee", b =>
                {
                    b.HasOne("BM_Models.Employee", "EmployeeHead")
                        .WithMany()
                        .HasForeignKey("EmployeeHeadEmployeeID");
                });

            modelBuilder.Entity("BM_Models.Items", b =>
                {
                    b.HasOne("BM_Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID");
                });

            modelBuilder.Entity("BM_Models.Order", b =>
                {
                    b.HasOne("BM_Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("BM_Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");
                });

            modelBuilder.Entity("BM_Models.Order_Items", b =>
                {
                    b.HasOne("BM_Models.Items", "Items")
                        .WithMany("Order_Items")
                        .HasForeignKey("ItemsItemID");

                    b.HasOne("BM_Models.Order", "Order")
                        .WithMany("Order_Items")
                        .HasForeignKey("OrderID");

                    b.HasOne("BM_Models.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeTaxID");
                });

            modelBuilder.Entity("BM_Models.SaleInvoice", b =>
                {
                    b.HasOne("BM_Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("BM_Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");
                });

            modelBuilder.Entity("BM_Models.SaleInvoice_Items", b =>
                {
                    b.HasOne("BM_Models.Items", "Items")
                        .WithMany()
                        .HasForeignKey("ItemsItemID");

                    b.HasOne("BM_Models.SaleInvoice", "SaleInvoice")
                        .WithMany("SaleInvoice_Items")
                        .HasForeignKey("SaleInvoiceSaleInvoceID");

                    b.HasOne("BM_Models.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeTaxID");
                });

            modelBuilder.Entity("BM_Models.SubTax", b =>
                {
                    b.HasOne("BM_Models.TaxType", null)
                        .WithMany("SubTax")
                        .HasForeignKey("TaxTypeTaxID");
                });

            modelBuilder.Entity("BM_Models.TaxType", b =>
                {
                    b.HasOne("BM_Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
